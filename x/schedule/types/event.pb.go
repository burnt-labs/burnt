// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: schedule/v1/event.proto

package types

import (
	fmt "fmt"
	_ "github.com/cosmos/cosmos-proto"
	types "github.com/cosmos/cosmos-sdk/types"
	proto "github.com/gogo/protobuf/proto"
	_ "google.golang.org/genproto/googleapis/api/annotations"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

type AddScheduledCallEvent struct {
	BlockHeight     uint64      `protobuf:"varint,1,opt,name=blockHeight,proto3" json:"blockHeight,omitempty"`
	ScheduledHeight uint64      `protobuf:"varint,2,opt,name=scheduledHeight,proto3" json:"scheduledHeight,omitempty"`
	Signer          string      `protobuf:"bytes,3,opt,name=signer,proto3" json:"signer,omitempty"`
	Contract        string      `protobuf:"bytes,4,opt,name=contract,proto3" json:"contract,omitempty"`
	Balance         *types.Coin `protobuf:"bytes,5,opt,name=balance,proto3" json:"balance,omitempty"`
	CallBody        []byte      `protobuf:"bytes,6,opt,name=call_body,json=callBody,proto3" json:"call_body,omitempty"`
}

func (m *AddScheduledCallEvent) Reset()         { *m = AddScheduledCallEvent{} }
func (m *AddScheduledCallEvent) String() string { return proto.CompactTextString(m) }
func (*AddScheduledCallEvent) ProtoMessage()    {}
func (*AddScheduledCallEvent) Descriptor() ([]byte, []int) {
	return fileDescriptor_b50dc404bce7ebd7, []int{0}
}
func (m *AddScheduledCallEvent) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *AddScheduledCallEvent) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_AddScheduledCallEvent.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *AddScheduledCallEvent) XXX_Merge(src proto.Message) {
	xxx_messageInfo_AddScheduledCallEvent.Merge(m, src)
}
func (m *AddScheduledCallEvent) XXX_Size() int {
	return m.Size()
}
func (m *AddScheduledCallEvent) XXX_DiscardUnknown() {
	xxx_messageInfo_AddScheduledCallEvent.DiscardUnknown(m)
}

var xxx_messageInfo_AddScheduledCallEvent proto.InternalMessageInfo

func (m *AddScheduledCallEvent) GetBlockHeight() uint64 {
	if m != nil {
		return m.BlockHeight
	}
	return 0
}

func (m *AddScheduledCallEvent) GetScheduledHeight() uint64 {
	if m != nil {
		return m.ScheduledHeight
	}
	return 0
}

func (m *AddScheduledCallEvent) GetSigner() string {
	if m != nil {
		return m.Signer
	}
	return ""
}

func (m *AddScheduledCallEvent) GetContract() string {
	if m != nil {
		return m.Contract
	}
	return ""
}

func (m *AddScheduledCallEvent) GetBalance() *types.Coin {
	if m != nil {
		return m.Balance
	}
	return nil
}

func (m *AddScheduledCallEvent) GetCallBody() []byte {
	if m != nil {
		return m.CallBody
	}
	return nil
}

type ExecuteScheduledCallEvent struct {
	BlockHeight   uint64      `protobuf:"varint,1,opt,name=blockHeight,proto3" json:"blockHeight,omitempty"`
	Gas           *types.Coin `protobuf:"bytes,2,opt,name=gas,proto3" json:"gas,omitempty"`
	Signer        string      `protobuf:"bytes,3,opt,name=signer,proto3" json:"signer,omitempty"`
	Contract      string      `protobuf:"bytes,4,opt,name=contract,proto3" json:"contract,omitempty"`
	BalanceBefore *types.Coin `protobuf:"bytes,5,opt,name=balance_before,json=balanceBefore,proto3" json:"balance_before,omitempty"`
	CallBody      []byte      `protobuf:"bytes,6,opt,name=call_body,json=callBody,proto3" json:"call_body,omitempty"`
}

func (m *ExecuteScheduledCallEvent) Reset()         { *m = ExecuteScheduledCallEvent{} }
func (m *ExecuteScheduledCallEvent) String() string { return proto.CompactTextString(m) }
func (*ExecuteScheduledCallEvent) ProtoMessage()    {}
func (*ExecuteScheduledCallEvent) Descriptor() ([]byte, []int) {
	return fileDescriptor_b50dc404bce7ebd7, []int{1}
}
func (m *ExecuteScheduledCallEvent) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ExecuteScheduledCallEvent) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ExecuteScheduledCallEvent.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ExecuteScheduledCallEvent) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ExecuteScheduledCallEvent.Merge(m, src)
}
func (m *ExecuteScheduledCallEvent) XXX_Size() int {
	return m.Size()
}
func (m *ExecuteScheduledCallEvent) XXX_DiscardUnknown() {
	xxx_messageInfo_ExecuteScheduledCallEvent.DiscardUnknown(m)
}

var xxx_messageInfo_ExecuteScheduledCallEvent proto.InternalMessageInfo

func (m *ExecuteScheduledCallEvent) GetBlockHeight() uint64 {
	if m != nil {
		return m.BlockHeight
	}
	return 0
}

func (m *ExecuteScheduledCallEvent) GetGas() *types.Coin {
	if m != nil {
		return m.Gas
	}
	return nil
}

func (m *ExecuteScheduledCallEvent) GetSigner() string {
	if m != nil {
		return m.Signer
	}
	return ""
}

func (m *ExecuteScheduledCallEvent) GetContract() string {
	if m != nil {
		return m.Contract
	}
	return ""
}

func (m *ExecuteScheduledCallEvent) GetBalanceBefore() *types.Coin {
	if m != nil {
		return m.BalanceBefore
	}
	return nil
}

func (m *ExecuteScheduledCallEvent) GetCallBody() []byte {
	if m != nil {
		return m.CallBody
	}
	return nil
}

type RemoveScheduledCallEvent struct {
	BlockHeight     uint64      `protobuf:"varint,1,opt,name=blockHeight,proto3" json:"blockHeight,omitempty"`
	ScheduledHeight uint64      `protobuf:"varint,2,opt,name=scheduledHeight,proto3" json:"scheduledHeight,omitempty"`
	Signer          string      `protobuf:"bytes,3,opt,name=signer,proto3" json:"signer,omitempty"`
	Contract        string      `protobuf:"bytes,4,opt,name=contract,proto3" json:"contract,omitempty"`
	Balance         *types.Coin `protobuf:"bytes,5,opt,name=balance,proto3" json:"balance,omitempty"`
	CallBody        []byte      `protobuf:"bytes,6,opt,name=call_body,json=callBody,proto3" json:"call_body,omitempty"`
}

func (m *RemoveScheduledCallEvent) Reset()         { *m = RemoveScheduledCallEvent{} }
func (m *RemoveScheduledCallEvent) String() string { return proto.CompactTextString(m) }
func (*RemoveScheduledCallEvent) ProtoMessage()    {}
func (*RemoveScheduledCallEvent) Descriptor() ([]byte, []int) {
	return fileDescriptor_b50dc404bce7ebd7, []int{2}
}
func (m *RemoveScheduledCallEvent) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *RemoveScheduledCallEvent) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_RemoveScheduledCallEvent.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *RemoveScheduledCallEvent) XXX_Merge(src proto.Message) {
	xxx_messageInfo_RemoveScheduledCallEvent.Merge(m, src)
}
func (m *RemoveScheduledCallEvent) XXX_Size() int {
	return m.Size()
}
func (m *RemoveScheduledCallEvent) XXX_DiscardUnknown() {
	xxx_messageInfo_RemoveScheduledCallEvent.DiscardUnknown(m)
}

var xxx_messageInfo_RemoveScheduledCallEvent proto.InternalMessageInfo

func (m *RemoveScheduledCallEvent) GetBlockHeight() uint64 {
	if m != nil {
		return m.BlockHeight
	}
	return 0
}

func (m *RemoveScheduledCallEvent) GetScheduledHeight() uint64 {
	if m != nil {
		return m.ScheduledHeight
	}
	return 0
}

func (m *RemoveScheduledCallEvent) GetSigner() string {
	if m != nil {
		return m.Signer
	}
	return ""
}

func (m *RemoveScheduledCallEvent) GetContract() string {
	if m != nil {
		return m.Contract
	}
	return ""
}

func (m *RemoveScheduledCallEvent) GetBalance() *types.Coin {
	if m != nil {
		return m.Balance
	}
	return nil
}

func (m *RemoveScheduledCallEvent) GetCallBody() []byte {
	if m != nil {
		return m.CallBody
	}
	return nil
}

func init() {
	proto.RegisterType((*AddScheduledCallEvent)(nil), "schedule.v1.AddScheduledCallEvent")
	proto.RegisterType((*ExecuteScheduledCallEvent)(nil), "schedule.v1.ExecuteScheduledCallEvent")
	proto.RegisterType((*RemoveScheduledCallEvent)(nil), "schedule.v1.RemoveScheduledCallEvent")
}

func init() { proto.RegisterFile("schedule/v1/event.proto", fileDescriptor_b50dc404bce7ebd7) }

var fileDescriptor_b50dc404bce7ebd7 = []byte{
	// 431 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xec, 0x94, 0xdf, 0x6a, 0xd4, 0x40,
	0x14, 0xc6, 0x37, 0xdb, 0xba, 0xb6, 0xb3, 0xfe, 0x81, 0xa0, 0x98, 0x56, 0x09, 0xa1, 0x20, 0x04,
	0xc4, 0x8c, 0x6b, 0x7d, 0x00, 0x9b, 0x52, 0xe9, 0x75, 0x7a, 0xe7, 0xcd, 0x32, 0x7f, 0x8e, 0xd9,
	0xc1, 0xd9, 0x39, 0xcb, 0xcc, 0xec, 0xd2, 0x7d, 0x0b, 0x5f, 0x40, 0xf0, 0x15, 0x04, 0x1f, 0xc2,
	0xcb, 0xe2, 0x95, 0x97, 0xb2, 0xfb, 0x22, 0x92, 0xec, 0xa4, 0x88, 0xc8, 0x2a, 0x5e, 0x78, 0xe5,
	0xe5, 0x39, 0xe7, 0xf7, 0xe5, 0x9c, 0xef, 0x23, 0x09, 0x79, 0xe0, 0xc4, 0x04, 0xe4, 0x5c, 0x03,
	0x5d, 0x8c, 0x28, 0x2c, 0xc0, 0xf8, 0x62, 0x66, 0xd1, 0x63, 0x3c, 0xec, 0x06, 0xc5, 0x62, 0x74,
	0xf8, 0xd8, 0x4f, 0x94, 0x95, 0xe3, 0x19, 0xb3, 0x7e, 0x49, 0x05, 0xba, 0x29, 0xba, 0x71, 0x8b,
	0x85, 0x62, 0xa3, 0x39, 0x7c, 0x54, 0x23, 0xd6, 0x1a, 0x28, 0x9b, 0x29, 0xca, 0x8c, 0x41, 0xcf,
	0xbc, 0x42, 0xd3, 0x4d, 0xd3, 0x0d, 0x4b, 0x39, 0x73, 0xcd, 0x36, 0x0e, 0x9e, 0x8d, 0xa8, 0x40,
	0x65, 0x36, 0xf3, 0xa3, 0xf7, 0x7d, 0x72, 0xff, 0x44, 0xca, 0x8b, 0xb0, 0x57, 0x9e, 0x32, 0xad,
	0xcf, 0x9a, 0x8b, 0xe2, 0x8c, 0x0c, 0xb9, 0x46, 0xf1, 0xf6, 0x1c, 0x54, 0x3d, 0xf1, 0x49, 0x94,
	0x45, 0xf9, 0x6e, 0xf5, 0x63, 0x2b, 0xce, 0xc9, 0xdd, 0xee, 0x5e, 0x19, 0xa8, 0x7e, 0x4b, 0xfd,
	0xdc, 0x8e, 0x9f, 0x91, 0x81, 0x53, 0xb5, 0x01, 0x9b, 0xec, 0x64, 0x51, 0xbe, 0x5f, 0x26, 0x5f,
	0x3e, 0x3d, 0xbd, 0x17, 0x5c, 0x9c, 0x48, 0x69, 0xc1, 0xb9, 0x0b, 0x6f, 0x95, 0xa9, 0xab, 0xc0,
	0xc5, 0x2f, 0xc8, 0x9e, 0x40, 0xe3, 0x2d, 0x13, 0x3e, 0xd9, 0xfd, 0x8d, 0xe6, 0x9a, 0x8c, 0x8f,
	0xc9, 0x4d, 0xce, 0x34, 0x33, 0x02, 0x92, 0x1b, 0x59, 0x94, 0x0f, 0x9f, 0x1f, 0x14, 0x41, 0xd1,
	0xf8, 0x2f, 0x82, 0xff, 0xe2, 0x14, 0x95, 0xa9, 0x3a, 0x32, 0x7e, 0x48, 0xf6, 0x05, 0xd3, 0x7a,
	0xcc, 0x51, 0x2e, 0x93, 0x41, 0x16, 0xe5, 0xb7, 0xaa, 0xbd, 0xa6, 0x51, 0xa2, 0x5c, 0x1e, 0x7d,
	0xec, 0x93, 0x83, 0xb3, 0x4b, 0x10, 0x73, 0x0f, 0x7f, 0x95, 0xd1, 0x13, 0xb2, 0x53, 0x33, 0xd7,
	0xe6, 0xb2, 0xf5, 0x9a, 0x86, 0xfa, 0x67, 0x31, 0xbd, 0x24, 0x77, 0x82, 0xf9, 0x31, 0x87, 0x37,
	0x68, 0xff, 0x20, 0xad, 0xdb, 0x41, 0x50, 0xb6, 0xfc, 0xf6, 0xcc, 0x3e, 0xf4, 0x49, 0x52, 0xc1,
	0x14, 0x17, 0xf0, 0xff, 0xb5, 0xfa, 0x75, 0x44, 0xe5, 0xf9, 0xe7, 0x55, 0x1a, 0x5d, 0xad, 0xd2,
	0xe8, 0xdb, 0x2a, 0x8d, 0xde, 0xad, 0xd3, 0xde, 0xd5, 0x3a, 0xed, 0x7d, 0x5d, 0xa7, 0xbd, 0xd7,
	0x45, 0xad, 0xfc, 0x64, 0xce, 0x0b, 0x81, 0x53, 0x5a, 0xce, 0xad, 0xf1, 0xaf, 0x94, 0x69, 0x9e,
	0x47, 0x79, 0x53, 0xd0, 0x4b, 0x7a, 0xfd, 0xef, 0xf0, 0xcb, 0x19, 0x38, 0x3e, 0x68, 0xbf, 0xe3,
	0xe3, 0xef, 0x01, 0x00, 0x00, 0xff, 0xff, 0xe1, 0x27, 0x23, 0xb3, 0x54, 0x04, 0x00, 0x00,
}

func (m *AddScheduledCallEvent) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *AddScheduledCallEvent) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *AddScheduledCallEvent) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.CallBody) > 0 {
		i -= len(m.CallBody)
		copy(dAtA[i:], m.CallBody)
		i = encodeVarintEvent(dAtA, i, uint64(len(m.CallBody)))
		i--
		dAtA[i] = 0x32
	}
	if m.Balance != nil {
		{
			size, err := m.Balance.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintEvent(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x2a
	}
	if len(m.Contract) > 0 {
		i -= len(m.Contract)
		copy(dAtA[i:], m.Contract)
		i = encodeVarintEvent(dAtA, i, uint64(len(m.Contract)))
		i--
		dAtA[i] = 0x22
	}
	if len(m.Signer) > 0 {
		i -= len(m.Signer)
		copy(dAtA[i:], m.Signer)
		i = encodeVarintEvent(dAtA, i, uint64(len(m.Signer)))
		i--
		dAtA[i] = 0x1a
	}
	if m.ScheduledHeight != 0 {
		i = encodeVarintEvent(dAtA, i, uint64(m.ScheduledHeight))
		i--
		dAtA[i] = 0x10
	}
	if m.BlockHeight != 0 {
		i = encodeVarintEvent(dAtA, i, uint64(m.BlockHeight))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *ExecuteScheduledCallEvent) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ExecuteScheduledCallEvent) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ExecuteScheduledCallEvent) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.CallBody) > 0 {
		i -= len(m.CallBody)
		copy(dAtA[i:], m.CallBody)
		i = encodeVarintEvent(dAtA, i, uint64(len(m.CallBody)))
		i--
		dAtA[i] = 0x32
	}
	if m.BalanceBefore != nil {
		{
			size, err := m.BalanceBefore.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintEvent(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x2a
	}
	if len(m.Contract) > 0 {
		i -= len(m.Contract)
		copy(dAtA[i:], m.Contract)
		i = encodeVarintEvent(dAtA, i, uint64(len(m.Contract)))
		i--
		dAtA[i] = 0x22
	}
	if len(m.Signer) > 0 {
		i -= len(m.Signer)
		copy(dAtA[i:], m.Signer)
		i = encodeVarintEvent(dAtA, i, uint64(len(m.Signer)))
		i--
		dAtA[i] = 0x1a
	}
	if m.Gas != nil {
		{
			size, err := m.Gas.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintEvent(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if m.BlockHeight != 0 {
		i = encodeVarintEvent(dAtA, i, uint64(m.BlockHeight))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *RemoveScheduledCallEvent) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *RemoveScheduledCallEvent) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *RemoveScheduledCallEvent) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.CallBody) > 0 {
		i -= len(m.CallBody)
		copy(dAtA[i:], m.CallBody)
		i = encodeVarintEvent(dAtA, i, uint64(len(m.CallBody)))
		i--
		dAtA[i] = 0x32
	}
	if m.Balance != nil {
		{
			size, err := m.Balance.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintEvent(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x2a
	}
	if len(m.Contract) > 0 {
		i -= len(m.Contract)
		copy(dAtA[i:], m.Contract)
		i = encodeVarintEvent(dAtA, i, uint64(len(m.Contract)))
		i--
		dAtA[i] = 0x22
	}
	if len(m.Signer) > 0 {
		i -= len(m.Signer)
		copy(dAtA[i:], m.Signer)
		i = encodeVarintEvent(dAtA, i, uint64(len(m.Signer)))
		i--
		dAtA[i] = 0x1a
	}
	if m.ScheduledHeight != 0 {
		i = encodeVarintEvent(dAtA, i, uint64(m.ScheduledHeight))
		i--
		dAtA[i] = 0x10
	}
	if m.BlockHeight != 0 {
		i = encodeVarintEvent(dAtA, i, uint64(m.BlockHeight))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func encodeVarintEvent(dAtA []byte, offset int, v uint64) int {
	offset -= sovEvent(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *AddScheduledCallEvent) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.BlockHeight != 0 {
		n += 1 + sovEvent(uint64(m.BlockHeight))
	}
	if m.ScheduledHeight != 0 {
		n += 1 + sovEvent(uint64(m.ScheduledHeight))
	}
	l = len(m.Signer)
	if l > 0 {
		n += 1 + l + sovEvent(uint64(l))
	}
	l = len(m.Contract)
	if l > 0 {
		n += 1 + l + sovEvent(uint64(l))
	}
	if m.Balance != nil {
		l = m.Balance.Size()
		n += 1 + l + sovEvent(uint64(l))
	}
	l = len(m.CallBody)
	if l > 0 {
		n += 1 + l + sovEvent(uint64(l))
	}
	return n
}

func (m *ExecuteScheduledCallEvent) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.BlockHeight != 0 {
		n += 1 + sovEvent(uint64(m.BlockHeight))
	}
	if m.Gas != nil {
		l = m.Gas.Size()
		n += 1 + l + sovEvent(uint64(l))
	}
	l = len(m.Signer)
	if l > 0 {
		n += 1 + l + sovEvent(uint64(l))
	}
	l = len(m.Contract)
	if l > 0 {
		n += 1 + l + sovEvent(uint64(l))
	}
	if m.BalanceBefore != nil {
		l = m.BalanceBefore.Size()
		n += 1 + l + sovEvent(uint64(l))
	}
	l = len(m.CallBody)
	if l > 0 {
		n += 1 + l + sovEvent(uint64(l))
	}
	return n
}

func (m *RemoveScheduledCallEvent) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.BlockHeight != 0 {
		n += 1 + sovEvent(uint64(m.BlockHeight))
	}
	if m.ScheduledHeight != 0 {
		n += 1 + sovEvent(uint64(m.ScheduledHeight))
	}
	l = len(m.Signer)
	if l > 0 {
		n += 1 + l + sovEvent(uint64(l))
	}
	l = len(m.Contract)
	if l > 0 {
		n += 1 + l + sovEvent(uint64(l))
	}
	if m.Balance != nil {
		l = m.Balance.Size()
		n += 1 + l + sovEvent(uint64(l))
	}
	l = len(m.CallBody)
	if l > 0 {
		n += 1 + l + sovEvent(uint64(l))
	}
	return n
}

func sovEvent(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozEvent(x uint64) (n int) {
	return sovEvent(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *AddScheduledCallEvent) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowEvent
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: AddScheduledCallEvent: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: AddScheduledCallEvent: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field BlockHeight", wireType)
			}
			m.BlockHeight = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvent
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.BlockHeight |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ScheduledHeight", wireType)
			}
			m.ScheduledHeight = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvent
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ScheduledHeight |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Signer", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvent
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthEvent
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthEvent
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Signer = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Contract", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvent
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthEvent
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthEvent
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Contract = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Balance", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvent
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthEvent
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthEvent
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Balance == nil {
				m.Balance = &types.Coin{}
			}
			if err := m.Balance.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CallBody", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvent
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthEvent
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthEvent
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.CallBody = append(m.CallBody[:0], dAtA[iNdEx:postIndex]...)
			if m.CallBody == nil {
				m.CallBody = []byte{}
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipEvent(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthEvent
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ExecuteScheduledCallEvent) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowEvent
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ExecuteScheduledCallEvent: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ExecuteScheduledCallEvent: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field BlockHeight", wireType)
			}
			m.BlockHeight = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvent
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.BlockHeight |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Gas", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvent
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthEvent
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthEvent
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Gas == nil {
				m.Gas = &types.Coin{}
			}
			if err := m.Gas.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Signer", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvent
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthEvent
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthEvent
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Signer = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Contract", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvent
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthEvent
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthEvent
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Contract = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field BalanceBefore", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvent
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthEvent
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthEvent
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.BalanceBefore == nil {
				m.BalanceBefore = &types.Coin{}
			}
			if err := m.BalanceBefore.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CallBody", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvent
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthEvent
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthEvent
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.CallBody = append(m.CallBody[:0], dAtA[iNdEx:postIndex]...)
			if m.CallBody == nil {
				m.CallBody = []byte{}
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipEvent(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthEvent
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *RemoveScheduledCallEvent) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowEvent
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: RemoveScheduledCallEvent: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: RemoveScheduledCallEvent: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field BlockHeight", wireType)
			}
			m.BlockHeight = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvent
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.BlockHeight |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ScheduledHeight", wireType)
			}
			m.ScheduledHeight = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvent
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ScheduledHeight |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Signer", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvent
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthEvent
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthEvent
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Signer = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Contract", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvent
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthEvent
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthEvent
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Contract = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Balance", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvent
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthEvent
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthEvent
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Balance == nil {
				m.Balance = &types.Coin{}
			}
			if err := m.Balance.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CallBody", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvent
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthEvent
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthEvent
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.CallBody = append(m.CallBody[:0], dAtA[iNdEx:postIndex]...)
			if m.CallBody == nil {
				m.CallBody = []byte{}
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipEvent(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthEvent
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipEvent(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowEvent
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowEvent
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowEvent
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthEvent
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupEvent
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthEvent
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthEvent        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowEvent          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupEvent = fmt.Errorf("proto: unexpected end of group")
)
