# This workflow is useful if you want to automate the process of:
#
# a) Creating a new prelease when you push a new tag with a "v" prefix (version).
#
#    This type of prerelease is meant to be used for production: alpha, beta, rc, etc. types of releases.
#    After the prerelease is created, you need to make your changes on the release page at the relevant
#    Github page and publish your release.
#
# b) Creating/updating the "latest" prerelease when you push to your default branch.
#
#    This type of prelease is useful to make your bleeding-edge binaries available to advanced users.
#
# The workflow will not run if there is no tag pushed with a "v" prefix and no change pushed to your 
# default branch.
on: push

jobs:
  might_release:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v2
        with:
          fetch-depth: 0

      - name: Set up docker buildx
        uses: docker/setup-buildx-action@v1

      - name: Prepare Release Variables
        id: vars
        uses: tendermint/starport/actions/release/vars@develop

      - name: Log in to the container registry
        if: ${{ steps.vars.outputs.should_release == 'true' }}
        uses: docker/login-action@dd4fa0671be5250ee6f50aedf4cb05514abda2c7
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Extract metadata for docker
        if: ${{ steps.vars.outputs.should_release == 'true' }}
        id: meta
        uses: docker/metadata-action@f2a13332ac1ce8c0a71aeac48a150dbb1838ab67
        with:
          images: BurntFinance/burnt

      - name: Build and push docker image
        if: ${{ steps.vars.outputs.should_release == 'true' }}
        uses: docker/build-push-action@v2
        with:
          context: .
          push: true
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          cache-from: type=gha
          cache-to: type=gha,mode=max
